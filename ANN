import numpy as np
from sklearn.decomposition import PCA
from sklearn.neural_network import MLPRegressor
from sklearn import svm
import sys
import csv
import warnings
import matplotlib.pyplot as plt

warnings.filterwarnings("ignore")  # 忽略警告

# 代码说明：需要准备一个原始光谱数据文件pattern.csv，原始label文件label.csv，代码最后会输出一个PCA结果文件pattern_pca.csv以及SVR预测结果文件label_predict.pca

# n = 50
# ===================================================
# reading all pattern to pattern variable
# ===================================================
pattern = list()
fhd = csv.reader(open('pattern.csv', 'r'))
for line in fhd:
    pattern.append(line)

# ===================================================
# conducting pca
# ===================================================

# ===================================================
# reading regression label to label_r
# ===================================================
label_r = list()
fhl = csv.reader(open('label.csv', 'r'))
for line in fhl:
    label_r.append(line)
label_r = np.array(label_r, dtype='float64')
label_r = label_r.tolist()

# ===================================================
# reading regression pattern to pattern_r
# ===================================================
pattern_r = list()
for i in range(0, 119):
    pattern_r.append(pattern[i])
pattern_r = np.array(pattern_r, dtype='float64')
pattern_r = pattern_r.tolist()

# ===================================================
# test set preparaton
# ===================================================

raw_test = list()
i = 1
for line in pattern:
    if i == 4:
        raw_test.append(line)
        i = 1
    else:
        i = i + 1
raw_test = np.array(raw_test, dtype='float64')
raw_test = raw_test.tolist()

# ===================================================
# regression training set preparaton
# ===================================================
raw_train_r = list()
label_train_r = list()
i, j = 1, 1
for line in pattern_r:
    if i == 4:
        i = 1
    else:
        raw_train_r.append(line)
        i = i + 1
for line in label_r:
    if j == 4:
        j = 1
    else:
        label_train_r.append(line)
        j = j + 1
raw_train_r = np.array(raw_train_r, dtype='float64')
raw_train_r = raw_train_r.tolist()
label_train_r = np.array(label_train_r, dtype='float64')
label_train_r = label_train_r.tolist()

# ===================================================
# training regression model as reg
# ===================================================
reg = MLPRegressor(hidden_layer_sizes=(5, 4), random_state=1)
reg.fit(raw_train_r, label_train_r)
label_predict_r = reg.predict(raw_test)
label_predict_r = label_predict_r.tolist()

# ===================================================
# get the final predict result and save it to label_predict.csv
# ===================================================
output = csv.writer(open('N-rbf ' + '.csv', 'a', newline=''), dialect='excel')
output.writerows(map(lambda x: [x], label_predict_r))
